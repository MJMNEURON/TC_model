// load templates and create a specific number of cells
load_file("nrngui.hoc")
load_file("template/TCcell_Apr3.tem")
load_file("template/RE_preserved_Apr3.tem")
load_file("template/interneuron_Apr3.tem")
load_file("template/rgc.tem")

//----------------------------------------------------------------------------
// loading cell templates
//----------------------------------------------------------------------------
ncells_tc = 16   // 16 tc_cell (LGN-principal-relay) loaded
objectvar TC[ncells_tc]      
for i = 0, ncells_tc - 1 { 
    TC[i] = new TCcell()
    TC[i].position(i+300, 5, i*300)
  }

ncells_in = 4   
objectvar IN[ncells_in]     
for i = 0, ncells_in - 1 { 
    IN[i] = new INcell()
    IN[i].position(i+696, 5, i*300) 
  } 

ncells_re = 12   // sets the number of cells
objectvar RE[ncells_re]      // create an array of object variables
objectvar restim[ncells_re]
for i = 0, ncells_re - 1 { 
    RE[i] = new REcell()
    RE[i].position(i, 5, i*300) // move origin of cel to (10, 5, -25)
    // attach IClamp to fix resting membrane potential, equivalent to add_dc()
    RE[i].soma_re restim[i] = new IClamp(.5)
    restim[i].del = 0
    restim[i].dur = 1e9 // dur has to be infinite when used with vector playing 
    restim[i].amp = 0.1
  }  

//code for printing properties of all sections
//forall {print secname(), diam(0.5), distance(0.5)}
/*
distance(0, 0.5)
  forall {
    printf distance(0.5)
    printf ("\n")
  }
*/

ncells_rgc = 16   
objectvar RGC[ncells_rgc]     
for i = 0, ncells_rgc - 1 { 
    RGC[i] = new RGCcell()
    RGC[i].position(i+300, 5, i*300) 
  } 


//----------------------------------------------------------------------------
// adding stimuli
//----------------------------------------------------------------------------
n_stimuli = 16
objectvar rstim[n_stimuli] // insert current injection
objectvar fspikes[n_stimuli], vecspikes[n_stimuli], vecstim[n_stimuli]
for i = 0, n_stimuli -1 {
  RGCcell[i].retinal_axon rstim[i] = new IClamp(.5)
  rstim[i].del = 0
  rstim[i].dur = 1e9 // dur has to be infinite when used with vector playing 
  rstim[i].amp = 0

  fspikes[i]=new File()
  //fspikes[i].ropen("contrast/cs3_06.dat")
  //fspikes[i].ropen("lightspot/condition1/spikes.dat")

  // inject spike trains to each RGC (retinal ganglion cell)
  if (i == 0){fspikes[i].ropen(spiking0)}
  if (i == 1){fspikes[i].ropen(spiking1)}
  if (i == 2){fspikes[i].ropen(spiking2)}
  if (i == 3){fspikes[i].ropen(spiking3)}
  if (i == 4){fspikes[i].ropen(spiking4)}
  if (i == 5){fspikes[i].ropen(spiking5)}
  if (i == 6){fspikes[i].ropen(spiking6)}
  if (i == 7){fspikes[i].ropen(spiking7)}
  if (i == 8){fspikes[i].ropen(spiking8)}
  if (i == 9){fspikes[i].ropen(spiking9)}
  if (i == 10){fspikes[i].ropen(spiking10)}
  if (i == 11){fspikes[i].ropen(spiking11)}
  if (i == 12){fspikes[i].ropen(spiking12)}
  if (i == 13){fspikes[i].ropen(spiking13)}
  if (i == 14){fspikes[i].ropen(spiking14)}
  if (i == 15){fspikes[i].ropen(spiking15)}

  vecspikes[i]=new Vector()
  vecstim[i] = new Vector(4000,0)
  vecspikes[i].scanf(fspikes[i])
  for total=0, vecspikes[i].size()-1{
     vecstim[i].x( int(vecspikes[i].x(total)*1000) ) = 4000 // *1000 for switching the unit
    } 
  // vecspikes[i].printf()
  printf("%g\n", total/2.4)
  vecstim[i].play( &rstim[i].amp, 1 )
}


//----------------------------------------------------------------------------
// transient time
//----------------------------------------------------------------------------
trans = 00

print " "
print ">> Transient time of ",trans," ms"
print " "

//----------------------------------------------------------------------------
// setup simulation parameters
//----------------------------------------------------------------------------
Dt = 0.2
npoints = 12500

dt = 0.1			// must be submultiple of Dt
tstart = trans
tstop = trans + npoints * Dt
runStopAt = tstop
steps_per_ms = 1/Dt

celsius = 34			// temperature of John's experiments

v_init = -74			// approximate resting Vm

//----------------------------------------------------------------------------
// adding graph(s): http://senselab.med.yale.edu/ModelDB/ShowModel.asp?model=18198&file=\SYN_NEW\gabab3.hoc
//----------------------------------------------------------------------------
objectvar g[20]         // max 20 graphs
ngraph = 0

proc addgraph() { local ii  // define subroutine to add a new graph
                // addgraph("variable", minvalue, maxvalue)
    ngraph = ngraph+1
    ii = ngraph-1
    g[ii] = new Graph()
    g[ii].size(0,tstop,$2,$3)
    g[ii].xaxis()
    g[ii].yaxis()
    g[ii].addvar($s1,1,0)
    g[ii].save_name("graphList[0].")
    graphList[0].append(g[ii])
}

// use built-in plotting on NEURON to plot spiking of specific segments
//addgraph("v(0.5)",-80,40)
//g.addvar("REcell[0].soma_re.v(0.5)", 2, 0.1) //red
addgraph("RGCcell[0].retinal_axon.v(0.5)",3,0.1) //blue

addgraph("TCcell[0].soma_tc.v(0.5)",-80,40)
addgraph("TCcell[3].soma_tc.v(0.5)",-80,40)
addgraph("TCcell[8].soma_tc.v(0.5)",-80,40)
addgraph("TCcell[11].soma_tc.v(0.5)",-80,40)
addgraph("TCcell[15].soma_tc.v(0.5)",-80,40)

addgraph("REcell[0].soma_re.v(0.5)",-80,40)
addgraph("REcell[2].soma_re.v(0.5)",-80,40)
addgraph("REcell[6].soma_re.v(0.5)",-80,40)
addgraph("REcell[9].soma_re.v(0.5)",-80,40)
addgraph("REcell[11].soma_re.v(0.5)",-80,40)
//addgraph("INcell[0].soma_in.v(0.5)",-80,40)

//run()
